package pt;


import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttClientPersistence;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
import java.math.*;
import java.util.*;
public class IotClient extends MqttClient {
	
	private ClientType clientType;
	public IotClient(String serverURI, String clientId, ClientType clientType) throws MqttException {
		super(serverURI, clientId, new MemoryPersistence());	
		
		this.clientType = clientType;
		keys = new ArrayList<Integer>();
	}
	
	private ArrayList<Integer> keys;

	public void EncryptMessage() {
	
		CipherManager cm = new CipherManager(CipherType.fromInteger(keys.get(0)%3));
		cm.SetKey1(keys.get(1));
		cm.SetKey2(keys.get(2));
	
		MqttMessage message = new MqttMessage(cm.Encryption(CreateContent()).getBytes());
		
		message.setQos(2);
		//wait here 
		//keys must be exchange on created connection
        this.publish("Topic"+"\\"+(id), message);
        
	}
	
	// Below this: Message Generation	
	String sample = "The quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog";

	public String CreateContent() {
		
		String result = new String();
		StringBuffer sb = new StringBuffer();
		for(int i=0;i<=IotNetwork.MessageLength/sample.length();i++) {
			sb.append(sample);
		}
		result =sb.toString();
		return result;
	}

	//Below this : Diffie-Hellman Key Exchange Algorithm
	private int p =5, g = 23;

	//private key is randomly generated key
	//otherPersonGeneratedKey is key given by other person
	//myGeneratedKey is key generated by me
	
	private int privateKey, myGeneratedKey ,otherPersonGeneratedKey;

	public void AddKey(int key) {
		this.keys.add(key);
	}
	
	//randomly generate private key
	//and generate my key
	public void SetPrivateKey() {
		Random rand = new Random();
		privateKey = rand.nextInt(1000);
		myGeneratedKey = MyModPow(p,privateKey,g);
	}
	
	
	public void SetOtherPersonGeneratedKey(int key) {
		otherPersonGeneratedKey = key;
	}
	
	//return my generated key
	public int GetGeneratedKey() {
		return myGeneratedKey;
	}
	
	public void CreateKey() {
		int key = MyModPow(otherPersonGeneratedKey,privateKey,g);
		AddKey(key);
	}
	
		
	public int MyModPow(int base, int power, int mod) {
		try {
			BigInteger ans = new BigInteger(base+"");
			ans = ans.modPow(new BigInteger(power+""), new BigInteger(mod+""));
		
			return Integer.parseInt(ans.toString());
		}catch(Exception e) {
			e.printStackTrace();
			return 1;
		}
	}
	public void ClearKeys() {
		keys.clear();
	}

}
